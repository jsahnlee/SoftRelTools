#!/bin/sh

# addpkg

script_defaults () {
	release_type=test
	expected_args=2
	head=false
	quiet=false
	current=false
	cvs_lhs_extra_args=""
	cvs_rhs_extra_args=""
	cvs_server_args=""
	method=cvs
	prune=true
	addpkg_prefs
}

# addpkg_prefs is a stub. It can be overriden by system or user prefs.
addpkg_prefs () { :; }

usage () {
	echo "usage: addpkg [options] <package> [tag]"
	echo 
	echo "addpkg adds a package to a release."
	echo 
	echo "options:"
	echo "    -?, --help: prints this usage message"
	echo "    -t, --test: add a new package in a test release (default)"
	echo "    -p, --production: add a new package to a production release"
	echo "    -h, --head: add the head version of <package>"
	echo "    -c, --current: use the version from the distribution (default)"
	echo "    -d <cvsroot>: use <cvsroot> for the cvsroot"
	echo "    -Q, --quiet: perform cvs actions quietly"
	echo "    --loud: do not perform cvs actions quietly (default)"
	echo "    -P, --prune: checkout from cvs using the prune option (default)"
	echo "    --no-prune: do not use prune option"
	echo "    -n, --no-cvs: copy directly from distribution, bypassing cvs"
	echo "    -l, --link: make a link to the package area instead of checking out from cvs"
	exit
}

process_args () {
	while getopts "?tphQnlcd:P-:" opt; do
		if [ "$opt" = "-" ]; then
			opt=$OPTARG
		fi
		case $opt in
			\? | help)
				usage
				;;
			t | test)
				release_type=test
				;;
			p | production)
				release_type=production
				method=relative_link
				;;
			h | head)
				head=true
				expected_args=1
				;;
			Q | quiet)
				quiet=true
				;;
			loud)
				quiet=false
				;;
			P | prune)
				prune=true
				;;
			no-prune)
				prune=false
				;;
			d)
				cvs_server_args="-d $OPTARG"
				;;
			n | no-cvs)
				method=copy
				;;
			c | current)
				current=true
				expected_args=1
				;;
			l | link)
				method=link
				;;
			*)	
				usage
				;;
		esac
	done
	shift `expr $OPTIND - 1`

	# If we expected two arguments, but got one, default to current	
	if [ "$expected_args" = "2" ] && [ "$#" = "1" ]; then
		current=true
		expected_args=1
	fi
	
	if [ "$#" -ne "$expected_args" ]; then
		usage
	fi
	
	package=$1
	if [ "$head" = "true" ]; then
		tag="HEAD"
	elif [ "$current" = "true" ]; then
		tag_tmp=`ls -l $SRT_DIST/releases/$SRT_BASE_RELEASE/$package`
		ls_error=$?
		if [ "$ls_error" != "0" ]; then
			fail "No version of $package exists in the release $SRT_BASE_RELEASE."
		fi
		tag=`echo "$tag_tmp" | sed -e "s@.*/packages/$package/@@"`
		# remove trailing slash
		tag=`echo $tag | sed 's@/$@@'`
		if [ "$tag" = "development" ]; then
			head=true
		fi
        echo "Release $SRT_BASE_RELEASE uses $package version $tag, will check that out"

	else
		tag=$2
	fi
	
	if [ "$tag" = "HEAD" ]; then
		head=true
	fi
	
	if [ "$prune" = "true" ]; then
		cvs_rhs_extra_args="$cvs_lhs_extra_args -P"
	fi

	if [ "$quiet" = "true" ]; then
		cvs_lhs_extra_args="$cvs_lhs_extra_args -Q"
	fi
}

fail () {
	echo "$1" >&2
	echo "$prog_name failed." >&2
	exit 1
}

actions () {
	if [ "$release_type" = "production" ]; then
		target_dir=$SRT_DIST/releases/$SRT_BASE_RELEASE
	else
		target_dir="."
		# See if we are at the top of a test release
		if [ -f "GNUmakefile" ]; then
			count=`grep -c srt_internal_top_of_testrel GNUmakefile`
			if [ "$count" = "1" ]; then
				in_testrel=true
			else
				in_testrel=false
			fi
		else
			in_testrel=false
		fi
		if [ ! "$in_testrel" = "true" ]; then
			fail "Please cd to the top of a test release to addpkg to a test relase."
		fi

	fi

	if [ -d "$target_dir/$package" ]; then
		fail "The package \"$package\" already exists in \"$target_dir\"."
	fi
# A workaround for CYGWIN's buggy test cmd	
	touch "$target_dir/srt_int_tmp.$$" > /dev/null 2>&1
	if [ ! -f "$target_dir/srt_int_tmp.$$" ]; then
		fail "You do not have write permission in \"$target_dir\"."
	fi
	/bin/rm -f "$target_dir/srt_int_tmp.$$"
	cd $target_dir

	echo "Adding package \"$package\" to \"$target_dir\"."
		if [ "$head" = "true" ]; then
			cvs_tag_args=""
		else
			cvs_tag_args="-r $tag"
		fi


# Check to see if package exists
	if [ ! "$method" = "cvs" ]; then	
		if [ "$method" = "relative_link" ]; then
			source_dir="../../packages/$package/$tag"
		else
			source_dir="$SRT_DIST/packages/$package/$tag"
		fi
		if [ ! -d "$source_dir" ]; then
			if [ "$release_type" = "production" ]; then
				echo "The tag \"$tag\" for the package \"$package\" does not exist in the distribution \"$SRT_DIST\"."
				echo "Attempting to check out the version with newver..."
				newver -Q "$package" "$tag"
				newver_error=$?
				if [ "$newver_error" != "0" ]; then
					fail "Attempt to check out package failed."
				else
					echo "Attempt to check out package succeeded."
				fi
			else
				fail "The tag \"$tag\" for the package \"$package\" does not exist in the distribution \"$SRT_DIST\"."
			fi
		fi
	fi

# Actually get the package
	if [ "$method" = "copy" ]; then
		cp -r $SRT_DIST/packages/$package/$tag $package
		find $package -exec chmod +w {} \;
	elif [ "$method" = "link" ]; then
		ln -s $SRT_DIST/packages/$package/$tag $package
	elif [ "$method" = "relative_link" ]; then
		ln -s ../../packages/$package/$tag $package
	else # method must be cvs
		if [ -z "$cvs_server_args" ]; then
			if [ -f "$SRT_DIST/packages/$package/cvsroot" ]; then
				echo "using package special cvs server"
				cvs_server_args="-d `cat $SRT_DIST/packages/$package/cvsroot`"
			fi
		fi
		echo cvs $cvs_lhs_extra_args $cvs_server_args checkout $cvs_rhs_extra_args$cvs_tag_args $package
		cvs $cvs_lhs_extra_args $cvs_server_args checkout $cvs_rhs_extra_args $cvs_tag_args $package
		cvs_error=$?
		if [ "$cvs_error" != "0" ]; then
			fail "cvs checkout failed."
		fi
	fi

# Create the include link
	# This is equivalent to doing an srt_setup -a. It makes querypkg much
	# faster.
        thisdir=`pwd`
	. `srt_environment -X SRT_LOCAL=$thisdir`
	pkg_include=`srt_int_querypkg --include $package`
	cd include > /dev/null
	ln -s ../$pkg_include $package

	cd ..
# Remove links from super directory if they exist
	if [ -d ./super/include/$package ]; then
		/bin/rm -f ./super/include/$package
		/bin/rm -f ./super/tmp/$package
		for product in `srt_int_querypkg --products $SRT_DIST/releases/$SRT_BASE_RELEASE/$package`
		do
			/bin/rm -f ./super/$product
		done
	fi
}

main () {
	if [ -f "$HOME/.srtrc" ]; then
		. "$HOME/.srtrc"
    	fi
	script_defaults
	process_args $*
	actions
}

prog_name=addpkg
if [ -f "$SRT_PRIVATE_CONTEXT/SRT_$SRT_PROJECT/special/scripts/addpkg" ]; then
	. "$SRT_PRIVATE_CONTEXT/SRT_$SRT_PROJECT/special/scripts/$prog_name"
elif [ -f "$SRT_PUBLIC_CONTEXT/SRT_$SRT_PROJECT/special/scripts/$prog_name" ]; then
	. "$SRT_PUBLIC_CONTEXT/SRT_$SRT_PROJECT/special/scripts/$prog_name"
fi

main $*
